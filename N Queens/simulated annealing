import random
import math

def count_conflicts(board, n):
    """Count the number of conflicts (attacking queens)."""
    conflicts = 0
    for i in range(n):
        for j in range(i + 1, n):
            # Check if queens are in the same column, same diagonal
            if board[i] == board[j] or abs(board[i] - board[j]) == j - i:
                conflicts += 1
    return conflicts

def simulated_annealing(n, initial_temp=1000, cooling_rate=0.995, max_iter=10000):
    # Randomly initialize the board with one queen per column
    board = [random.randint(0, n - 1) for _ in range(n)]
    current_conflicts = count_conflicts(board, n)
    temperature = initial_temp
    iterations = 0

    while iterations < max_iter:
        if current_conflicts == 0:
            return board  # Found solution

        # Pick a random queen and try to move it to a new position in its column
        col = random.randint(0, n - 1)
        new_row = random.randint(0, n - 1)
        new_board = board[:]
        new_board[col] = new_row
        new_conflicts = count_conflicts(new_board, n)

        # If the new board is better (fewer conflicts), accept it
        if new_conflicts < current_conflicts:
            board = new_board
            current_conflicts = new_conflicts
        else:
            # Otherwise, accept the new board with a probability
            # P(accept) = exp((current_conflicts - new_conflicts) / temperature)
            acceptance_prob = math.exp((current_conflicts - new_conflicts) / temperature)
            if random.random() < acceptance_prob:
                board = new_board
                current_conflicts = new_conflicts

        # Cool down the temperature
        temperature *= cooling_rate
        iterations += 1

    return None  # No solution found within max_iter

def print_board(board, n):
    """Print the board in a readable format."""
    for row in range(n):
        line = ['Q' if col == board[row] else '.' for col in range(n)]
        print(" ".join(line))
    print()

# Test with N = 4 (you can change the value of N)
n = 4
solution = simulated_annealing(n)

if solution:
    print(f"Solution for {n}-Queens using Simulated Annealing:")
    print_board(solution, n)
else:
    print("No solution found.")
